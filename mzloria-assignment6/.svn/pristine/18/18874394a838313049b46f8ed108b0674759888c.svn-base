/*
 * TCSS 305 Autumn 2018
 * Assignment 6
 */

package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JPanel;
import javax.swing.Timer;
import model.Board;

/**
 * This is the class that handles 
 * the tetris panel.
 * 
 * @author Michael Zachary Loria
 * @version November 29 2018
 */
public class GUITetrisPanel extends JPanel implements ActionListener
{
    /** A generated serial ID. */
    private static final long serialVersionUID = -4872113882123673787L;
    
    /** An large (default) size for the Tetris panel. */
    private static final Dimension LARGE_PANEL_SIZE = new Dimension(321, 616);
    
    /** An medium size for the Tetris panel. */
    private static final Dimension MEDIUM_PANEL_SIZE = new Dimension(221, 416);
    
    /** An medium size for the Tetris panel. */
    private static final Dimension SMALL_PANEL_SIZE = new Dimension(121, 216);

    /** Amount of blocks that can fit in one row. */
    private static final int NUM_BLOCKS = 10;
    
    /** Aount of blocks that can fit in one column. */
    private static final int COLUMN_BLOCKS = 20;
    
    /** Default tetris block size. */
    private static final int LARGE_BLOCK_SIZE = 30;
    
    /** Default tetris block size. */
    private static final int MEDIUM_BLOCK_SIZE = 20;
    
    /** Default tetris block size. */
    private static final int SMALL_BLOCK_SIZE = 10;
    
    /** Default tetris horizontal spacing. */
    private static final int DEFAULT_HORIZONTAL = 10;
    
    /** Default tetris vertical spacing. */
    private static final int DEFAULT_VERTICAL = 5;
    
    /** Delay of timer. */
    private static final int TIMER_DELAY = 1000;
    
    /** The tetris board. */
    private final Board myBoard;
    
    /** The size of each square. */
    private int mySquareSize;
    
    /** The amount added to the y coordinate of each block to center it in the panel. */
    private int myHorizontalOffset;
    
    /** The amount added to the x coordinate of each block to center it in the panel. */
    private int myVerticalOffset;
    
    /** String representation of the board. */
    private String myBoardString;
 
    /** Array of string representation of area outside of board. */
    private String[] myBoardStrings;
    
    /** String representation of area outside of board. */
    
    /** The timer for the tetris game. */
    private Timer myTimer;

    /**
     * Initializes the fields.
     * 
     * @param theBoard The board where the Tetris game is played on.
     */
    protected GUITetrisPanel(final Board theBoard)
    {
        myHorizontalOffset = DEFAULT_HORIZONTAL;
        myVerticalOffset = DEFAULT_VERTICAL;
        myTimer = new Timer(TIMER_DELAY, this);
        myBoardStrings = null;
        myBoard = theBoard;
        setPreferredSize(LARGE_PANEL_SIZE);
        mySquareSize = LARGE_BLOCK_SIZE;
        largePanel();
        myTimer.start();
    }

    @Override
    public void paintComponent(final Graphics theGraphics)
    {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON); 
        if (myBoardStrings != null)
        {
            for (int i = 0; i < myBoardStrings.length; i++)
            { 
                for (int j = 0; j < NUM_BLOCKS; j++)
                {
                    if (myBoardStrings[i].charAt(j) != ' ')
                    {
                        g2d.setColor(Color.BLUE);
                        g2d.fillRect(myHorizontalOffset + mySquareSize * j, 
                                     myVerticalOffset + mySquareSize * i, 
                                     mySquareSize, mySquareSize);
                        g2d.setColor(new Color(0, 0, 0));
                        g2d.drawRect(myHorizontalOffset + mySquareSize * j, 
                                     myVerticalOffset + mySquareSize * i, 
                                     mySquareSize, mySquareSize);
                    }
                }
            }
        }
    }
    
    @Override
    public void actionPerformed(final ActionEvent theEvent)
    {
        final Object source = theEvent.getSource();
        if (source.equals(myTimer))
        {
            myBoard.down();
        }
    }
    
    /**
     * Properly parses the string representation
     * of the board.
     * 
     * @param theBoardString The string representation of the board.
     */
    protected void currentBoardString(final String theBoardString)
    {
        myBoardString = theBoardString;
        final String[] separateRows = myBoardString.split("----------");
        final String[] boardRows = separateRows[1].trim().split("\\|");
        final String[] boardRowValues = new String[COLUMN_BLOCKS];
        
        int k = 0;
        for (int i = 0; i < boardRows.length; i++)
        {
            if (!boardRows[i].equals("") && !boardRows[i].equals("\n"))
            {
                boardRowValues[k] = boardRows[i];
                k = k + 1;                                
            }     
        }
        myBoardStrings = boardRowValues;
    }
    
    /**
     * Stops timer when game is over. 
     */
    protected void gameOver()
    {
        myTimer.stop();
    }
    
    /**
     * Pause and resumes game.
     */
    protected void pauseResumeGame()
    {
        if (myTimer.isRunning())
        {
            myTimer.stop();
        }
        else
        {
            myTimer.start();
        }
    }
    
    /**
     * Resizes the tetris panel to a small size.
     */
    protected void smallPanel()
    {
        setSize(SMALL_PANEL_SIZE);
        setPreferredSize(SMALL_PANEL_SIZE);
        mySquareSize = SMALL_BLOCK_SIZE;
        revalidate();
    }
    
    /**
     * Resizes the tetris panel to a medium size.
     */
    protected void mediumPanel()
    {
        setSize(MEDIUM_PANEL_SIZE);
        setPreferredSize(MEDIUM_PANEL_SIZE);
        mySquareSize = MEDIUM_BLOCK_SIZE;
        revalidate();
    }
    
    /**
     * Resizes the tetris panel to a large (default) size.
     */
    protected void largePanel()
    {
        setSize(LARGE_PANEL_SIZE);
        setPreferredSize(LARGE_PANEL_SIZE);
        mySquareSize = LARGE_BLOCK_SIZE;
        revalidate();
    }
 
}
