/*
 * TCSS 305 Autumn 2018
 * Assignment 6
 */

package view;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ButtonGroup;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.KeyStroke;

/**
 * A menu bar used by the GUI.
 * 
 * @author Michael Zachary Loria
 * @version November 16 2018
 */
public final class GUIMenuBar extends JMenuBar implements PropertyChangeListener
{
    
    /** A generated serial version ID. */
    private static final long serialVersionUID = -786830276637425245L;
    
    /** The new game menu item String. */
    private static final String NEW_GAME = "New Game";
    
    /** The pause menu item String. */
    private static final String PAUSE = "Pause";

    /** A button group for the buttons for the tools. */ 
    private final ButtonGroup myGroup;
    
    /** The list of button menu items for the tools. */
    private final List<JRadioButtonMenuItem> myButtonMenuItems;
    
    /** The customize menu. */
    private final JMenu myCustomize;
    
    /** The tetris panel that will be resized. */
    private final GUITetrisPanel myTetrisPanel;
    
    /** The start game menu item. */
    private final JMenuItem myNewGame;
    
    /** The end game menu item. */
    private final JMenuItem myEndGame;
    
    /** The pause game menu item. */
    private final JMenuItem myPauseGame;

    /**
     * Constructs the menu bar for the Tetris game.
     * 
     * @param theTetrisPanel The tetris panel that will be resized.
     */
    protected GUIMenuBar(final GUITetrisPanel theTetrisPanel)
    {
        myTetrisPanel = theTetrisPanel;
        myTetrisPanel.addPropertyChangeListener(this);
        myNewGame = new JMenuItem(NEW_GAME);
        myEndGame = new JMenuItem("End Game");
        myPauseGame = new JMenuItem(PAUSE);
        myCustomize = new JMenu("Customize Game");
        myButtonMenuItems = new ArrayList<>();
        myGroup = new ButtonGroup();
        setUpMenuBar();  
    }
    
    /**
     * Sets up the JMenuBar with all of the proper 
     * components.
     */
    private void setUpMenuBar()
    {
        final JMenu options = new JMenu("Game Options");
        
        myNewGame.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(final ActionEvent theActionEvent)
            {
                myTetrisPanel.newGame();
            }
        });
        myNewGame.setAccelerator(KeyStroke.getKeyStroke('n'));
        myEndGame.setEnabled(false);
        myEndGame.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(final ActionEvent theActionEvent)
            {
                myTetrisPanel.gameOver();
            }
        });
        myEndGame.setAccelerator(KeyStroke.getKeyStroke('e'));
        myPauseGame.setEnabled(false);
        myPauseGame.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(final ActionEvent theActionEvent)
            {
                myTetrisPanel.pauseResumeGame();
            }
        });
        myPauseGame.setAccelerator(KeyStroke.getKeyStroke('p'));
        
        options.add(myNewGame);
        options.addSeparator();
        options.add(myEndGame);
        options.addSeparator();
        options.add(myPauseGame);
        
        final JMenu help = new JMenu("Help");
        
        final JMenuItem about = new JMenuItem("About");
        help.add(about);
        
        add(options);
        final JRadioButtonMenuItem smallBoard = new JRadioButtonMenuItem("Small");
        smallBoard.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(final ActionEvent theEvent)
            {
                myTetrisPanel.smallPanel();
            }
        });
        myButtonMenuItems.add(smallBoard);
        myGroup.add(smallBoard);
        myCustomize.add(smallBoard);
        final JRadioButtonMenuItem mediumBoard = new JRadioButtonMenuItem("Medium");
        mediumBoard.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(final ActionEvent theEvent)
            {
                myTetrisPanel.mediumPanel();
            }
        });
        myButtonMenuItems.add(mediumBoard);
        myGroup.add(mediumBoard);
        myCustomize.add(mediumBoard);
        final JRadioButtonMenuItem largeBoard = new JRadioButtonMenuItem("Large");
        largeBoard.addActionListener(new ActionListener()
        {
            @Override
            public void actionPerformed(final ActionEvent theEvent)
            {
                myTetrisPanel.largePanel();
            }
        });
        myButtonMenuItems.add(largeBoard);
        myGroup.add(largeBoard);
        myCustomize.add(largeBoard);
        largeBoard.setSelected(true);
        add(myCustomize);
        add(help);
    }
   
    /** Creates a radio button menu item with each respective title,
     * and adds them to the tool menu and the button group.
     * 
     * @param theSize The size associated with each respective JRadioButtonMenuItem.
     */
    protected void createButton(final String theSize) 
    {
        final JRadioButtonMenuItem radioButtonMenuItem = new JRadioButtonMenuItem(theSize);
        myButtonMenuItems.add(radioButtonMenuItem);
        myGroup.add(radioButtonMenuItem);
        myCustomize.add(radioButtonMenuItem);
    }
    
    @Override
    public void propertyChange(final PropertyChangeEvent theEvent)
    {
        if (theEvent.getPropertyName().equals("Game Over")) 
        {
            myNewGame.setEnabled(true);
            myPauseGame.setEnabled(false);
            myPauseGame.setText(PAUSE);
            myEndGame.setEnabled(false);
        }
        else if (theEvent.getPropertyName().equals("Pause Resume"))
        {
            myPauseGame.setText(theEvent.getNewValue().toString());
        }
        else if (theEvent.getPropertyName().equals(NEW_GAME))
        {
            myNewGame.setEnabled(false);
            myPauseGame.setEnabled(true);
            myEndGame.setEnabled(true);
        }
    }
    
}

