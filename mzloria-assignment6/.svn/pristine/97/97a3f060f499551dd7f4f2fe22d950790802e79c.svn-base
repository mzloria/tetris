/**
 * 
 */
package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;

import javax.swing.JPanel;

import model.Board;
import model.MovableTetrisPiece;
import model.TetrisPiece;

/**
 * @author Michael Zachary Loria
 * @version November 24 2018
 */
public class GUITetrisPanel extends JPanel implements PropertyChangeListener
{
    /** A generated serial ID. */
    private static final long serialVersionUID = -4872113882123673787L;
    
    /** The tetris board. */
    private final Board myBoard;
    
    /** The size of each square. */
    private int mySquareSize;
    
    /** String representation of the board. */
    private String myBoardString;
 
    /** Array of string representation of area outside of board. */
    private String[] myBoardStrings;
    
    /** String representation of area outside of board. */
    private String[] myPreviewStrings;

    public GUITetrisPanel(Board theBoard)
    {
        myBoardStrings = null;
        myPreviewStrings = null;
        myBoard = theBoard;
        myBoard.addPropertyChangeListener(this);
        mySquareSize = 30;
    }

    public void paintComponent(final Graphics theGraphics)
    {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                             RenderingHints.VALUE_ANTIALIAS_ON); 
        setUpTetrisPanel(g2d);
        if(myBoardStrings != null && myPreviewStrings != null)
        {
            for(int i = 0; i < myBoardStrings.length; i++)
            {
                for(int j = 0; j < 10; j++)
                {
                    if(myBoardStrings[i].charAt(j) != ' ')
                    {
                        g2d.setColor(Color.BLUE);
                        g2d.fillRect(10 + mySquareSize * j, 10+ mySquareSize * i, mySquareSize, mySquareSize);
                    }
                }
            }
        }
    }
    
    private void setUpTetrisPanel(Graphics2D theGraphics)
    {
       /* theGraphics.setPaint(Color.LIGHT_GRAY);
        theGraphics.fillRect(10, 10, mySquareSize, mySquareSize);*/
    }
    
    public void moveOne()
    {
        myBoard.down();
    }

    @Override
    public void propertyChange(final PropertyChangeEvent theEvent)
    {
        if (theEvent.getPropertyName().equals("piece moved")) 
        {
            myBoardString = (String) theEvent.getNewValue();
            System.out.println(myBoardString);
            currentBoardString();
            repaint();
        }
    }
    
    private void currentBoardString()
    {
        String[] separateRows = myBoardString.split("----------");
        String[] previewRows = separateRows[0].trim().split("\\|");
        String[] boardRows = separateRows[1].trim().split("\\|");
        
/*
        for(int i = 0; i < previewRows.length; i++)
        {
            if(!previewRows[i].equals("") && !previewRows[i].equals("\n"))
            {
            System.out.print("START:");
            System.out.print(previewRows[i]);
            System.out.println(":END");
            }
        }*/
        
        String[] boardRowValues = new String[20];
        String[] previewRowValues = new String[4];
        
        int j = 0;
        for(int i = 0; i < previewRows.length; i++)
        {
            
            if(!previewRows[i].equals("") && !previewRows[i].equals("\n"))
            {
                previewRowValues[j] = previewRows[i];
                j = j + 1;                                
            }
        }
        
        int k = 0;
        for(int i = 0; i < boardRows.length; i++)
        {
            if(!boardRows[i].equals("") && !boardRows[i].equals("\n"))
            {
                boardRowValues[k] = boardRows[i];
                k = k + 1;                                
            }     
        }
        myBoardStrings = boardRowValues;
        myPreviewStrings = previewRowValues;
        
        for(int i = 0; i < myBoardStrings.length; i++)
        {
            System.out.print("START:");
            System.out.print(myBoardStrings[i]);
            System.out.println(":END");
        }
        System.out.println("BREAK");
        for(int i = 0; i < myPreviewStrings.length; i++)
        {
            System.out.print("START:");
            System.out.print(myPreviewStrings[i]);
            System.out.println(":END");
        } 
    }
    
    
    
}
